package utils

import (
	"os"
	"strconv"
	"time"
)

// –®–∞—Ö–º–∞—Ç–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã Unicode
const (
	KingWhite   = "‚ôî"
	QueenWhite  = "‚ôï"
	RookWhite   = "‚ôñ"
	BishopWhite = "‚ôó"
	KnightWhite = "‚ôò"
	PawnWhite   = "‚ôô"

	KingBlack   = "‚ôö"
	QueenBlack  = "‚ôõ"
	RookBlack   = "‚ôú"
	BishopBlack = "‚ôù"
	KnightBlack = "‚ôû"
	PawnBlack   = "‚ôü"

	EmptySquare = "."
)

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
const (
	CaptureSymbol   = "üí•"
	ForkSymbol      = "üîå"
	PromotionSymbol = "ü™Ñ"
	SparklesSymbol  = "‚ú®"
)

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
const (
	CmdStart      = "start"
	CmdCreateRoom = "create_room"
	CmdPlayBot    = "play_with_bot"
	CmdMove       = "move"
	CmdDraw       = "draw"
	CmdSurrender  = "surrender"
	CmdBless      = "bless"
)

// Game states
const (
	GameStateNew      = "new"
	GameStateActive   = "active"
	GameStateFinished = "finished"
)

// Event types
const (
	EventMove    = "move"
	EventGameEnd = "game_end"
	EventDraw    = "draw"
)

// Cache settings
const (
	DefaultCacheSize     = 10000
	CacheCleanupInterval = 1 * time.Hour
	CacheEntryLifetime   = 24 * time.Hour
)

// Security settings
const (
	MaxTokens       = 1000
	TokenExpiration = 24 * time.Hour
	RateLimitPerMin = 60
)

// Bot settings
const (
	DefaultDifficulty = "medium"
	MaxGames          = 100
	MoveTimeout       = 30 * time.Second
)

// Configuration —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type Config struct {
	BotToken    string
	Difficulty  string
	MaxGames    int
	CacheSize   int
	Environment string
}

// LoadConfig –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
func LoadConfig() *Config {
	return &Config{
		BotToken:    os.Getenv("BOT_TOKEN"),
		Difficulty:  getEnvOrDefault("DIFFICULTY", DefaultDifficulty),
		MaxGames:    getEnvAsIntOrDefault("MAX_GAMES", MaxGames),
		CacheSize:   getEnvAsIntOrDefault("CACHE_SIZE", DefaultCacheSize),
		Environment: getEnvOrDefault("ENV", "development"),
	}
}

// getEnvOrDefault –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func getEnvOrDefault(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

// getEnvAsIntOrDefault –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func getEnvAsIntOrDefault(key string, defaultValue int) int {
	if value := os.Getenv(key); value != "" {
		if intValue, err := strconv.Atoi(value); err == nil {
			return intValue
		}
	}
	return defaultValue
}

// Logger settings
const (
	LogTimeFormat = "2006-01-02 15:04:05"
	LogFilePath   = "logs/chessbot.log"
)

// Error messages
const (
	ErrInvalidMove       = "Invalid move"
	ErrGameNotFound      = "Game not found"
	ErrInvalidGameState  = "Invalid game state"
	ErrUnauthorized      = "Unauthorized access"
	ErrRateLimitExceeded = "Rate limit exceeded"
)

// Success messages
const (
	MsgGameCreated     = "Game created successfully"
	MsgMoveMade        = "Move made successfully"
	MsgGameFinished    = "Game finished"
	MsgDrawOffered     = "Draw offered"
	MsgDrawAccepted    = "Draw accepted"
	MsgDrawRejected    = "Draw rejected"
	MsgGameSurrendered = "Game surrendered"
)
