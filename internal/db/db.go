package db

import (
	"context"
	"fmt"

	"telega_chess/config"

	"github.com/jackc/pgx/v5/pgxpool"
	"go.uber.org/zap"

	"telega_chess/internal/utils"
)

var Pool *pgxpool.Pool

// InitDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é Pool.
func InitDB() {
	dsn := fmt.Sprintf(
		"postgres://%s:%s@%s%s/%s",
		config.Cfg.PgUser,
		config.Cfg.PgPass,
		config.Cfg.PgHost,
		config.Cfg.PgPort,
		config.Cfg.PgDbName)
	dbCfg, err := pgxpool.ParseConfig(dsn)
	if err != nil {
		utils.Logger.Error("üòñ –û—à–∏–±–∫–∞ pgxpool.ParseConfig: üíÄ", zap.Error(err))
	}

	pool, err := pgxpool.New(context.Background(), dbCfg.ConnString())
	if err != nil {
		utils.Logger.Error("üòñ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: üíÄ", zap.Error(err))
	}

	// –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	err = pool.Ping(context.Background())
	if err != nil {
		utils.Logger.Error("üòñ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ü§∑", zap.Error(err))
	}

	utils.Logger.Info("ü¶æ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL üóÑ", zap.Error(err))
	Pool = pool

	// –í—ã–ø–æ–ª–Ω–∏–º –º–∏–≥—Ä–∞—Ü–∏—é (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç):
	initSchema()
}

// initSchema - —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
func initSchema() {
	schemaUsers := `
	CREATE TABLE IF NOT EXISTS users (
		id        BIGINT UNIQUE,
		user_name  VARCHAR(255),
		first_name VARCHAR(255),
		chat_id   BIGINT DEFAULT(0),   -- 0 –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–Ω–∞–µ–º
		rating    INT DEFAULT 1000,
		wins      INT DEFAULT 0,
		total_games INT DEFAULT 0
	);
	`
	_, err := Pool.Exec(context.Background(), schemaUsers)
	if err != nil {
		utils.Logger.Error("üòñ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users: üíÄ", zap.Error(err))
	}

	schemaRooms := `
	CREATE TABLE IF NOT EXISTS rooms (
		room_id    VARCHAR(36) PRIMARY KEY,
		player1_id BIGINT NOT NULL,
		player2_id BIGINT,
		status     VARCHAR(20) NOT NULL DEFAULT('waiting'), -- waiting/playing/finished
		board_state TEXT,
		white_id   BIGINT,
		black_id   BIGINT,
		chat_id    BIGINT, -- –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
		created_at TIMESTAMP DEFAULT NOW(),
		updated_at TIMESTAMP DEFAULT NOW(),
	    CONSTRAINT fk_p1 FOREIGN KEY(player1_id) REFERENCES users(id),
	    CONSTRAINT fk_p2 FOREIGN KEY(player2_id) REFERENCES users(id)
	);
	`
	_, err = Pool.Exec(context.Background(), schemaRooms)
	if err != nil {
		utils.Logger.Error("üòñ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã rooms: üíÄ", zap.Error(err))
	}
}
