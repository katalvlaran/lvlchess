package telegram

import (
	"fmt"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStartCommand(message *tgbotapi.Message, session *Session) {
	welcomeText := `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –±–æ—Ç–∞! üéÆ

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/create_room - –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
/play_with_bot - –ò–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞
/move - –°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /move e2-e4)
/draw - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∏—á—å—é
/surrender - –°–¥–∞—Ç—å—Å—è

–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! ‚ôüÔ∏è`

	b.sendMessage(message.Chat.ID, welcomeText)
}

// handleCreateRoomCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /create_room
func (b *Bot) handleCreateRoomCommand(message *tgbotapi.Message, session *Session) {
	if session.State != StateIdle {
		b.sendMessage(message.Chat.ID, "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç–µ ÔøΩÔøΩ–æ–º–Ω–∞—Ç—É")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1 –º–∏–Ω—É—Ç–∞", "time_1"),
			tgbotapi.NewInlineKeyboardButtonData("5 –º–∏–Ω—É—Ç", "time_5"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("30 –º–∏–Ω—É—Ç", "time_30"),
			tgbotapi.NewInlineKeyboardButtonData("1 —á–∞—Å", "time_60"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", "time_0"),
		),
	)

	b.sessions.UpdateSession(message.From.ID, func(s *Session) {
		s.State = StateSelectingTimeControl
		s.LastMessage = message
	})

	b.sendMessageWithKeyboard(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏:", keyboard)
}

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫
func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) {
	session := b.sessions.GetSession(callback.From.ID)
	if session == nil {
		return
	}

	data := callback.Data
	if strings.HasPrefix(data, "time_") {
		b.handleTimeControlSelection(callback, session)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–øÔøΩÔøΩ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
	switch data {
	case "accept_draw":
		b.handleDrawAccept(callback, session)
	case "decline_draw":
		b.handleDrawDecline(callback, session)
	}
}

// handleTimeControlSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
func (b *Bot) handleTimeControlSelection(callback *tgbotapi.CallbackQuery, session *Session) {
	timeStr := strings.TrimPrefix(callback.Data, "time_")
	var timeLimit int
	fmt.Sscanf(timeStr, "%d", &timeLimit)

	room, err := b.gameHandler.CreateRoom(callback.From.ID, time.Duration(timeLimit)*time.Minute)
	if err != nil {
		b.sendMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã")
		return
	}

	b.sessions.UpdateSession(callback.From.ID, func(s *Session) {
		s.State = StateWaitingForOpponent
		s.CurrentRoom = room.ID
		s.TimeControl = timeLimit
	})

	shareLink := fmt.Sprintf("t.me/%s?start=%s", callback.Message.Chat.UserName, room.ID)
	response := fmt.Sprintf("–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É:\n%s", shareLink)

	b.sendMessage(callback.Message.Chat.ID, response)
}
