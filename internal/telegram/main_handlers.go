package telegram

import (
	"fmt"
	"strings"
	"time"

	"telega_chess/internal/db"
	"telega_chess/internal/game"
	"telega_chess/internal/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

/*	main_handlers.go
	HandleUpdate
	handleMessage
	handleCallback
	handleNewChatMembers */

// HandleUpdate - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	switch {
	case update.Message != nil:
		handleMessage(bot, update)
	case update.CallbackQuery != nil:
		handleCallback(bot, update.CallbackQuery)
	case update.MyChatMember != nil:
		// ???
		// –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∏ —è —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ –∫–∞–∫...?
		// –∫–∞–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∫ –º–æ–∂–Ω–æ –∫—Ä—É—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è !?
		// ???
	case update.ChatMember != nil:
		handleNewChatMembers(bot, update)
	}
}

// handleMessage - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è/–∫–æ–º–∞–Ω–¥—ã
func handleMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := update.Message

	if msg.NewChatMembers != nil {
		handleNewChatMembers(bot, update)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –∏ msg.IsCommand():
	if msg.Chat.IsGroup() || msg.Chat.IsSuperGroup() {
		if msg.IsCommand() {
			if msg.Command() == "setroom" {
				handleSetRoomCommand(bot, update)
			} else {
				// –û—Ç–∫–ª—é—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
				reply := tgbotapi.NewMessage(msg.Chat.ID, "–ó–¥–µ—Å—å –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setroom <room_id> –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.")
				bot.Send(reply)
			}
		} else {
			// –õ—é–±–æ–π —Ç–µ–∫—Å—Ç -> "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏..."
			//reply := tgbotapi.NewMessage(msg.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ (inline).")
			reply := tgbotapi.NewMessage(msg.Chat.ID, "üåö")
			bot.Send(reply)
		}
		return
	}

	// –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–∫–∞
	if msg.IsCommand() {
		switch msg.Command() {
		case "start":
			handleStartCommand(bot, update) // –≤ logic.go
		case "create_room":
			handleCreateRoomCommand(bot, update)
		case "play_with_bot":
			handlePlayWithBotCommand(bot, update)
		case "game_list":
			handleGameListCommand(bot, update)
		default:
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /start."))
		}
	} else {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üåö"))
	}
}

func handleCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery) {
	data := query.Data

	switch {
	case data == "manage_room":
		handleManageRoomMenu(bot, query)
	case data == "continue_setup":
		handleContinueSetup(bot, query)
	case strings.HasPrefix(data, "retry_rename:"):
		newTitle := data[len("retry_rename:"):]
		handleRetryRename(bot, query, newTitle)
	case strings.HasPrefix(data, "create_chat_"):
		// –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–°–æ–∑–¥–∞—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ß–∞—Ç"
		roomID := data[len("create_chat_"):]
		handleCreateChatInstruction(bot, query, roomID)

	case strings.HasPrefix(data, "delete_"):
		roomID := data[7:]
		msg := tgbotapi.NewMessage(query.Message.Chat.ID, "–ö–æ–º–Ω–∞—Ç–∞ "+roomID+" –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞).")
		bot.Send(msg)
	default:
		msg := tgbotapi.NewMessage(query.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: "+data)
		bot.Send(msg)
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
	callback := tgbotapi.NewCallback(query.ID, "")
	if _, err := bot.Request(callback); err != nil {
		utils.Logger.Error("üòñ AnswerCallbackQuery error üëæ", zap.Error(err))
	}
}

// HandleNewChatMembers –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤ –≥—Ä—É–ø–ø–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (NewChatMembers)
func handleNewChatMembers(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	chat := update.Message.Chat
	newMembers := update.Message.NewChatMembers

	// –ü–æ–ª—É—á–∏–º room, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å:
	room, err := db.GetRoomByChatID(chat.ID) // –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –≤ db, —Ç–∏–ø–∞ GetRoomByChatID
	var haveRoom bool
	if err == nil && room.RoomID != "" {
		haveRoom = true
	}

	for _, member := range newMembers {
		if member.IsBot && member.ID == bot.Self.ID {
			// –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É ‚Üí –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤, –≤—ã–¥–∞—ë–º "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å..."
			//tryRenameGroup(bot, chat.ID, fmt.Sprintf("tChess:%d", room.Player1.Username))
			tryRenameGroup(bot, chat.ID, fmt.Sprintf("tChess:%d", time.Now().Unix()))

			// –ü–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–æ–π"
			manageButton := tgbotapi.NewInlineKeyboardButtonData("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–æ–π", "manage_room")
			kb := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(manageButton),
			)
			msg := tgbotapi.NewMessage(chat.ID,
				"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Telega-Chess. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–º–Ω–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ [–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–æ–π].")
			msg.ReplyMarkup = kb
			bot.Send(msg)

		} else {
			// –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ (–∏–ª–∏ –µ—â—ë –∫—Ç–æ-—Ç–æ).
			// –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å "–ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è" –∫–æ–º–Ω–∞—Ç–∞ (haveRoom == true),
			// –∏ room.Player2ID == nil => –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–≥–æ –≤—Ç–æ—Ä—ã–º –∏–≥—Ä–æ–∫–æ–º
			if haveRoom && room.Player2 == nil {
				p2 := &db.User{
					ID:        member.ID,
					Username:  member.UserName,
					FirstName: member.FirstName,
					ChatID:    db.UnregisteredPrivateChat,
				}

				if err = db.CreateOrUpdateUser(p2); err != nil {
					bot.Send(tgbotapi.NewMessage(chat.ID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞: "+err.Error()))
					return
				}

				room.Player2 = p2
				game.AssignRandomColors(room) // –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –±–µ–ª—ã–µ/—á—ë—Ä–Ω—ã–µ, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã

				room.Status = "playing"
				if err := db.UpdateRoom(room); err != nil {
					bot.Send(tgbotapi.NewMessage(chat.ID, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: "+err.Error()))
					return
				}

				// –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –≤ "tChess:@user1_‚öîÔ∏è_@user2"
				newTitle := makeFinalTitle(room)
				tryRenameGroup(bot, chat.ID, newTitle)

				notifyGameStarted(bot, room)
				break
			}
		}
	}
}
