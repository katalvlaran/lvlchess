package telegram

import (
	"context"
	"fmt"
	"strings"

	"telega_chess/internal/db/models"
	"telega_chess/internal/game"
	"telega_chess/internal/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/notnil/chess"
	"go.uber.org/zap"
)

// prepareMoveButtons —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–≥—É—Ä, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ö–æ–¥–∏—Ç—å,
// –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ "choose_figure:<square>" –¥–ª—è —Ç–µ—Ö —Ñ–∏–≥—É—Ä, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 valid move.
//
// 1. –ó–∞–≥—Ä—É–∂–∞–µ–º FEN –∏–∑ room.BoardState –∏ —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∏–≥—Ä—ã.
// 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á–µ–π —Ö–æ–¥ ‚Äî White –∏–ª–∏ Black.
// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ userID c room.WhiteID/room.BlackID (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç sideToMove).
// 4. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º ValidMoves, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Ö –ø–æ "from"-square.
// 5. –î–ª—è –∫–∞–∂–¥–æ–π —Ñ–∏–≥—É—Ä—ã "from" (–∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ—Ç —Ö–æ–¥—ã) –¥–µ–ª–∞–µ–º –æ–¥–Ω—É inline-–∫–Ω–æ–ø–∫—É "choose_figure:fromSquare".
// 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ sendMessageToRoomOrUsers –∏–ª–∏ SendMessageToRoom.
func (h *Handler) prepareMoveButtons(ctx context.Context, room *models.Room, userID int64) {
	// 0. –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ boardState
	if room.BoardState == "" {
		h.sendMessageToRoomOrUsers(ctx, room, "–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏!", tgbotapi.ModeHTML)
		return
	}

	// 1. –ó–∞–≥—Ä—É–∂–∞–µ–º FEN –≤ notnil/chess
	fenOption, err := chess.FEN(room.BoardState)
	if err != nil {
		h.sendMessageToRoomOrUsers(ctx, room, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫—É!", tgbotapi.ModeHTML)
		return
	}
	chGame := chess.NewGame(fenOption)
	if chGame == nil {
		h.sendMessageToRoomOrUsers(ctx, room, "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è FEN.", tgbotapi.ModeHTML)
		return
	}

	// 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ —Ö–æ–¥–∏—Ç
	sideToMove := chGame.Position().Turn() // chess.White –∏–ª–∏ chess.Black
	var mustMoveUserID int64
	if sideToMove == chess.White {
		mustMoveUserID = *room.WhiteID // —É—Å–ª–æ–≤–Ω–æ, —É –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å room.WhiteID (int64)
	} else {
		mustMoveUserID = *room.BlackID
	}

	// –°–≤–µ—Ä–∏–º, —Ç–æ—Ç –ª–∏ —ç—Ç–æ userID
	if mustMoveUserID != userID {
		h.sendMessageToRoomOrUsers(ctx, room, "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", tgbotapi.ModeHTML)
		return
	}

	// 3. –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É "fromSquare => []Move"
	validMoves := chGame.ValidMoves()
	movesBySquare := make(map[chess.Square][]chess.Move)
	for _, mv := range validMoves {
		movesBySquare[mv.S1()] = append(movesBySquare[mv.S1()], *mv)
	}

	// 4. –§–∏–ª—å—Ç—Ä—É–µ–º "fromSquare" —Ç–∞–∫, —á—Ç–æ–±—ã —Ñ–∏–≥—É—Ä–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞–ª–∞ —Ç–µ–∫—É—â–µ–º—É sideToMove
	// (notnil/chess –æ–±—ã—á–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–∞—ë—Ç validMoves —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–æ—Ä–æ–Ω—ã,
	//  –Ω–æ –º—ã –º–æ–∂–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ piece.Color() == sideToMove)
	board := chGame.Position().Board()

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ squares, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 move
	figureSquares := make([]chess.Square, 0)
	figureIcone := make(map[string]string)
	for sq, mvs := range movesBySquare {
		if len(mvs) == 0 {
			continue
		}
		// –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–∏–≥—É—Ä–∞ –Ω–∞ sq –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ sideToMove?
		piece := board.Piece(sq)
		if piece.Color() == sideToMove {
			figureSquares = append(figureSquares, sq)
			figureIcone[sq.String()] = game.PieceToStr(piece)
		}
	}

	if len(figureSquares) == 0 {
		h.sendMessageToRoomOrUsers(ctx, room, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤!", tgbotapi.ModeHTML)
		return
	}

	// 5. –§–æ—Ä–º–∏—Ä—É–µ–º InlineKeyboard
	var rows [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton
	keyboardSort(figureSquares)
	for i, sq := range figureSquares {
		// –ü—Ä–∏–º–µ—Ä: "choose_figure:b8"
		sqStr := sq.String()
		callbackData := fmt.Sprintf("choose_figure:%s&roomID:%s", sqStr, room.RoomID)
		buttonText := fmt.Sprintf("%s %s", figureIcone[sqStr], sqStr)
		btn := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)

		row = append(row, btn)
		// –ü—É—Å—Ç—å –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ (–ø–æ–∑–∂–µ –≤—ã—Å—Ç—Ä–æ–∏–º –ø–æ sq.Rank )
		// TODO to const + dynamyc
		if (i+1)%2 == 0 {
			rows = append(rows, row)
			row = []tgbotapi.InlineKeyboardButton{}
		}
	}
	if len(row) > 0 {
		rows = append(rows, row)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	// 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	SendInlineKeyboard(h.Bot, room, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É –¥–ª—è —Ö–æ–¥–∞:", keyboard)
}

// handleChooseFigureCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –≤—Ä–æ–¥–µ "choose_figure:b8".
// 1. –ü–∞—Ä—Å–∏–º b8.
// 2. –ó–∞–≥—Ä—É–∂–∞–µ–º room, boardState.
// 3. –í—ã–±–∏—Ä–∞–µ–º valid moves, –≥–¥–µ from == b8.
// 4. –°–æ–∑–¥–∞—ë–º Inline-–∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞ "move:b8-c6", "move:b8-a6" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
func (h *Handler) handleChooseFigureCallback(ctx context.Context, query *tgbotapi.CallbackQuery) {
	action, figureSquare, roomID, err := parseCallbackData(query.Data)
	utils.Logger.Error("üòñ handleChooseFigureCallback  üëæ",
		zap.Any("action", action),
		zap.Any("param", figureSquare),
		zap.Any("roomID", roomID),
		zap.Any("err", err),
		//zap.Any("err.Error()", err.Error()),
	)
	if err != nil || (action != ActionMove && action != ActionChooseFigure) {
		// error handling
		utils.Logger.Error("üòñ handleChooseFigureCallback  üëæ", zap.Error(err))
		return
	}

	room, err := h.RoomRepo.GetRoomByID(ctx, roomID)
	if err != nil {
		callback := tgbotapi.NewCallback(query.ID, "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		utils.Logger.Error("üòñ –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üëæ"+err.Error(), zap.Error(err))
		if _, err := h.Bot.Request(callback); err != nil {
			utils.Logger.Error("üòñ AnswerCallbackQuery error üëæ"+err.Error(), zap.Error(err))
		}

		return
	}

	if room.BoardState == "" {
		h.sendMessageToRoomOrUsers(ctx, room, "–ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏!", tgbotapi.ModeHTML)
		return
	}

	// –†–∞—Å–ø–∞—Ä—Å–∏–º FEN —á–µ—Ä–µ–∑ notnil/chess
	fenOption, err := chess.FEN(room.BoardState)
	if err != nil {
		h.sendMessageToRoomOrUsers(ctx, room, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫—É!", tgbotapi.ModeHTML)
		return
	}

	chGame := chess.NewGame(fenOption)
	if chGame == nil {
		h.sendMessageToRoomOrUsers(ctx, room, "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è FEN.", tgbotapi.ModeHTML)
		return
	}
	// 2. –§–∏–ª—å—Ç—Ä—É–µ–º validMoves, –≥–¥–µ from == figureSquare
	validMoves := chGame.ValidMoves()
	var movesForThisSquare []chess.Move
	fromSq, errParseFrom := game.StrToSquare(figureSquare)
	if errParseFrom != nil {
		callback := tgbotapi.NewCallback(query.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç —Ñ–∏–≥—É—Ä—ã.")
		utils.Logger.Error("üòñ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç —Ñ–∏–≥—É—Ä—ã. üëæ"+errParseFrom.Error(), zap.Error(errParseFrom))
		if _, err = h.Bot.Request(callback); err != nil {
			utils.Logger.Error("üòñ AnswerCallbackQuery error üëæ"+err.Error(), zap.Error(err))
		}
		return
	}
	for _, mv := range validMoves {
		if mv.S1().String() == figureSquare {
			movesForThisSquare = append(movesForThisSquare, *mv)
		}
	}

	if len(movesForThisSquare) == 0 {
		h.sendMessageToRoomOrUsers(ctx, room, "–£ —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã –Ω–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ö–æ–¥–æ–≤.", tgbotapi.ModeHTML)
		return
	}

	// 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ "move:b8-c6" etc.
	var rows [][]tgbotapi.InlineKeyboardButton
	row := []tgbotapi.InlineKeyboardButton{}

	// –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–∞–º—É —Ñ–∏–≥—É—Ä—É (–¥–ª—è —ç–º–æ–¥–∑–∏)
	board := chGame.Position().Board()
	piece := board.Piece(fromSq)

	for i, mv := range movesForThisSquare {
		callbackData := fmt.Sprintf("move:%s-%s&roomID:%s", mv.S1().String(), mv.S2().String(), roomID)

		// --- —Ñ–æ—Ä–º–∏—Ä—É–µ–º "—Ç–µ–∫—Å—Ç" –∫–Ω–æ–ø–∫–∏ c —ç–º–æ–¥–∑–∏ ---
		btnText := fmt.Sprintf("%s ", buildMoveButtonText(piece, mv))
		// –ø—Ä–∏–º–µ—Ä: "‚ôî‚Ü∑üõ°‚ôñ\n e1->g1" (—Ä–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä–æ—Ç–∫–∞—è),
		// –∏–ª–∏ "ü™Ñ‚ôôüí®‚ú®‚ôï‚ú®\n d7->d8Q" (–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ),
		// –∏–ª–∏ "‚ôû‚§µ\n f5->h6" (–æ–±—ã—á–Ω—ã–π —Ö–æ–¥).

		btn := tgbotapi.NewInlineKeyboardButtonData(btnText, callbackData)
		row = append(row, btn)

		if (i+1)%4 == 0 {
			rows = append(rows, row)
			row = []tgbotapi.InlineKeyboardButton{}
		}
	}
	if len(row) > 0 {
		rows = append(rows, row)
	}

	kb := tgbotapi.NewInlineKeyboardMarkup(rows...)
	SendInlineKeyboard(h.Bot, room, fmt.Sprintf("–•–æ–¥—ã –¥–ª—è —Ñ–∏–≥—É—Ä—ã %s:", figureSquare), kb)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª "–∫—Ä—É—Ç–∏–ª–∫—É"
	callback := tgbotapi.NewCallback(query.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ–¥.")
	if _, err = h.Bot.Request(callback); err != nil {
		utils.Logger.Error("üòñ AnswerCallbackQuery error üëæ"+err.Error(), zap.Error(err))
	}
}

// parseCallbackData —Ä–∞–∑–±–∏—Ä–∞–µ—Ç data –≤–∏–¥–∞ "move:b8-c6&roomID:xxxx-..."
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (action="move", param="b8-c6", roomID="xxxx-...") –∏–ª–∏ –æ—à–∏–±–∫—É.
func parseCallbackData(data string) (action, param, roomID string, err error) {
	mainParts := strings.Split(data, "&")
	if len(mainParts) != 2 {
		return "", "", "", fmt.Errorf("incorrect callback data format (no &)")
	}
	left, right := mainParts[0], mainParts[1]
	// left = "move:b8-c6", right="roomID:xxxx..."

	leftParts := strings.Split(left, ":")
	if len(leftParts) != 2 {
		return "", "", "", fmt.Errorf("incorrect left part format")
	}
	action, param = leftParts[0], leftParts[1]

	rightParts := strings.Split(right, ":")
	if len(rightParts) != 2 {
		return "", "", "", fmt.Errorf("incorrect right part format")
	}
	if rightParts[0] != "roomID" {
		return "", "", "", fmt.Errorf("expected 'roomID:', got %s", rightParts[0])
	}
	roomID = rightParts[1]

	return action, param, roomID, nil
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ –ª–∏—á–∫—É –ò–õ–ò –≤ –≥—Ä—É–ø–ø—É, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç room.ChatID
func SendInlineKeyboard(bot *tgbotapi.BotAPI, room *models.Room, text string, keyboard tgbotapi.InlineKeyboardMarkup) {
	// –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É –≤–∞—Å –µ—Å—Ç—å –ª–æ–≥–∏–∫–∞:
	//  - –µ—Å–ª–∏ room.ChatID != nil => —à–ª—ë–º —Ç—É–¥–∞
	//  - –∏–Ω–∞—á–µ —à–ª—ë–º –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º (–∏–ª–∏ —Ç–æ–ª—å–∫–æ userID?), —Å–º–æ—Ç—Ä—è –∫–∞–∫ –≤—ã —É—Å—Ç—Ä–æ–∏–ª–∏ –ø—Ä–æ–µ–∫—Ç

	//sendMessageToRoomOrUsers(bot, room, text, modeKeyboard)
	utils.Logger.Error(
		"üòñ SendInlineKeyboard  üëæ",
		zap.Any("room.ChatID", room.ChatID),
		zap.Any("room.Player2ID", room.Player2ID),
		zap.Any("(room.Player2ID != nil):", (room.Player2ID != nil)),
		zap.Any("room.room.WhiteID", *room.WhiteID),
		zap.Any("room.BlackID", *room.BlackID),
		zap.Any("room.IsWhiteTurn", room.IsWhiteTurn))
	if room.ChatID != nil {
		msg := tgbotapi.NewMessage(*room.ChatID, text)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	} else if room.Player2ID != nil {
		// –õ–∏—á–Ω–∞—è –∏–≥—Ä–∞ => —à–ª—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Ö–æ–¥–∏—Ç—å?
		// –ò–ª–∏ —Å—Ä–∞–∑—É –æ–±–æ–∏–º? up to you.
		// –î–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏–º WhiteID:
		if room.IsWhiteTurn {
			msgWhite := tgbotapi.NewMessage(*room.WhiteID, text)
			msgWhite.ReplyMarkup = keyboard
			msgWhite.ParseMode = tgbotapi.ModeMarkdownV2
			bot.Send(msgWhite)
		} else {
			msgBlack := tgbotapi.NewMessage(*room.BlackID, text)
			msgBlack.ReplyMarkup = keyboard
			msgBlack.ParseMode = tgbotapi.ModeMarkdownV2
			bot.Send(msgBlack)
		}
	} else { // send to Player1
		msgP1 := tgbotapi.NewMessage(room.Player1ID, text)
		msgP1.ReplyMarkup = keyboard
		msgP1.ParseMode = tgbotapi.ModeMarkdownV2
		bot.Send(msgP1)
	}
}

func (h *Handler) handleMoveCallback(ctx context.Context, query *tgbotapi.CallbackQuery) {
	action, moveStr, roomID, err := parseCallbackData(query.Data)
	if err != nil || action != "move" {
		// error handling
		return
	}
	// –†–∞—Å–ø–∞—Ä—Å–∏–º "b8-c6" –≤ from->to
	figureParts := strings.Split(moveStr, "-")
	if len(figureParts) != 2 {
		callback := tgbotapi.NewCallback(query.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–æ–¥–∞.")
		if _, err := h.Bot.Request(callback); err != nil {
			utils.Logger.Error("üòñ AnswerCallbackQuery error üëæ"+err.Error(), zap.Error(err))
		}

		return
	}
	fromSquare, toSquare := figureParts[0], figureParts[1] // "b8", "c6"
	room, err := h.RoomRepo.GetRoomByID(ctx, roomID)
	if err != nil || room == nil {
		callback := tgbotapi.NewCallback(query.ID, "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		utils.Logger.Error("üòñ –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üëæ"+err.Error(), zap.Error(err))
		if _, err = h.Bot.Request(callback); err != nil {
			utils.Logger.Error("üòñ AnswerCallbackQuery error üëæ"+err.Error(), zap.Error(err))
		}

		return
	}

	if room.BoardState == "" {
		h.sendMessageToRoomOrUsers(ctx, room, "–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏!", tgbotapi.ModeHTML)
		return
	}

	// –†–∞—Å–ø–∞—Ä—Å–∏–º FEN —á–µ—Ä–µ–∑ notnil/chess
	fenOption, err := chess.FEN(room.BoardState)
	if err != nil {
		h.sendMessageToRoomOrUsers(ctx, room, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫—É!", tgbotapi.ModeHTML)
		return
	}
	// --- –ó–∞–≥—Ä—É–∂–∞–µ–º FEN –≤ notnil/chess ---
	chGame := chess.NewGame(fenOption)
	if chGame == nil {
		h.sendMessageToRoomOrUsers(ctx, room, "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è FEN!", tgbotapi.ModeHTML)
		return
	}

	// --- –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
	// (–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –∫–∞–∫ –≤ prepareMoveButtons).
	// –ü–æ–ª—É—á–∏–º userID –∏–∑ query, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
	userID := query.From.ID
	sideToMove := chGame.Position().Turn() // White/Black
	var mustMoveUserID int64
	if sideToMove == chess.White {
		mustMoveUserID = *room.WhiteID
	} else {
		mustMoveUserID = *room.BlackID
	}
	if mustMoveUserID != userID {
		callback := tgbotapi.NewCallback(query.ID, "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")
		if _, err = h.Bot.Request(callback); err != nil {
			utils.Logger.Error("üòñ AnswerCallbackQuery error üëæ"+err.Error(), zap.Error(err))
		}
		return
	}

	// --- –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç "move" (b8 -> c6) –¥–ª—è notnil/chess ---
	// notnil/chess –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–µ–ª–∞—Ç—å AlgebraicNotation –∏–ª–∏ SAN. –ú—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å:
	mv, errParse := chess.UCINotation{}.Decode(chGame.Position(), fromSquare+toSquare)
	if errParse != nil {
		// –õ–∏–±–æ fallback:
		// mv, errParse = chess.AlgebraicNotation{}.Decode(...)
		callback := tgbotapi.NewCallback(
			query.ID,
			fmt.Sprintf("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ö–æ–¥ %s-%s: %v", fromSquare, toSquare, errParse))
		utils.Logger.Error("üòñ –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üëæ"+errParse.Error(), zap.Error(errParse))
		if _, err = h.Bot.Request(callback); err != nil {
			utils.Logger.Error("üòñ AnswerCallbackQuery error üëæ"+err.Error(), zap.Error(err))
		}
		return
	}

	// --- –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ ---
	errMove := chGame.Move(mv)
	if errMove != nil {
		// –•–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
		h.sendMessageToRoomOrUsers(ctx, room, "–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ–¥!", tgbotapi.ModeHTML)
		callback := tgbotapi.NewCallback(query.ID, "")
		utils.Logger.Error("üòñ –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üëæ"+errMove.Error(), zap.Error(errMove))
		if _, err = h.Bot.Request(callback); err != nil {
			utils.Logger.Error("üòñ AnswerCallbackQuery error üëæ"+err.Error(), zap.Error(err))
		}

		return
	}

	// --- –•–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω ---
	// –û–±–Ω–æ–≤–∏–º room.BoardState -> —Ç–µ–∫—É—â–µ–µ FEN
	newFEN := chGame.FEN()
	room.BoardState = newFEN
	room.IsWhiteTurn = !room.IsWhiteTurn
	if err = h.RoomRepo.UpdateRoom(ctx, room); err != nil {
		h.sendMessageToRoomOrUsers(ctx, room, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏!", tgbotapi.ModeHTML)
		callback := tgbotapi.NewCallback(query.ID, "")
		utils.Logger.Error("üòñ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏ üëæ"+err.Error(), zap.Error(err))
		if _, err = h.Bot.Request(callback); err != nil {
			utils.Logger.Error("üòñ AnswerCallbackQuery error üëæ"+err.Error(), zap.Error(err))
		}

		return
	}

	// --- –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –ø–∞—Ä—Ç–∏—è (–º–∞—Ç, –ø–∞—Ç, –Ω–∏—á—å—è) ---
	outcome := chGame.Outcome()
	if outcome != chess.NoOutcome {
		// –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
		switch outcome {
		case chess.WhiteWon:
			h.sendMessageToRoomOrUsers(ctx, room, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª–∏ –±–µ–ª—ã–µ.", tgbotapi.ModeHTML)
		case chess.BlackWon:
			h.sendMessageToRoomOrUsers(ctx, room, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª–∏ —á—ë—Ä–Ω—ã–µ.", tgbotapi.ModeHTML)
		case chess.Draw:
			h.sendMessageToRoomOrUsers(ctx, room, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∏—á—å—è.", tgbotapi.ModeHTML)
		}
		// –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å room.Status="finished", —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ —Ç.–¥.
		callback := tgbotapi.NewCallback(query.ID, "–•–æ–¥ —Å–¥–µ–ª–∞–Ω! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
		if _, err = h.Bot.Request(callback); err != nil {
			utils.Logger.Error("üòñ AnswerCallbackQuery error üëæ"+err.Error(), zap.Error(err))
			return
		}
	}

	// --- –ò–Ω–∞—á–µ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è ---
	// 1) –°–æ–æ–±—â–∞–µ–º: "–•–æ–¥ —Å–¥–µ–ª–∞–Ω: b8-c6"
	moveMsg := "–•–æ–¥ —Å–¥–µ–ª–∞–Ω:\n"
	if mv.HasTag(chess.Capture) {
		moveMsg = fmt.Sprintf("```\n%s\n```", buildMoveButtonText(chGame.Position().Board().Piece(mv.S1()), *mv))
	} else {
		moveMsg = fmt.Sprintf("```%s-%s```", fromSquare, toSquare)
	}
	h.sendMessageToRoomOrUsers(ctx, room, moveMsg, tgbotapi.ModeMarkdownV2)

	// 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –¥–æ—Å–∫—É
	h.SendBoardToRoomOrUsers(ctx, room)

	// 3) –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É:
	nextTurn := chGame.Position().Turn() // White/Black
	var nextUserID int64
	if nextTurn == chess.White {
		nextUserID = *room.WhiteID
	} else {
		nextUserID = *room.BlackID
	}

	// 4) –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
	h.prepareMoveButtons(ctx, room, nextUserID)

	// --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback –±–µ–∑ alert
	callback := tgbotapi.NewCallback(query.ID, "–•–æ–¥ —É—Å–ø–µ—à–µ–Ω!")
	if _, err = h.Bot.Request(callback); err != nil {
		utils.Logger.Error("üòñ AnswerCallbackQuery error üëæ"+err.Error(), zap.Error(err))
	}
}

// buildMoveButtonText - —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏,
// —É—á–∏—Ç—ã–≤–∞—è —Ä–æ–∫–∏—Ä–æ–≤–∫—É, –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ, –≤–∑—è—Ç–∏–µ –∏ —Ç.–¥.
func buildMoveButtonText(p chess.Piece, mv chess.Move) string {
	// shortCastle / longCastle?
	if mv.HasTag(chess.KingSideCastle) {
		// –ë–µ–ª—ã–π: e1-g1, –ß—ë—Ä–Ω—ã–π: e8-g8
		return "‚ôî‚Ü∑üõ°‚üµ‚ôñ\n " + mv.String() // —É—Å–ª–æ–≤–Ω–æ: "‚ôî‚Ü∑üõ°‚ôñ\n e1g1"
	}
	if mv.HasTag(chess.QueenSideCastle) {
		return "‚ôñ‚ü∂üõ°‚Ü∂‚ôî\n " + mv.String() // —É—Å–ª–æ–≤–Ω–æ "‚ôñ‚ü∂üõ°‚Ü∂‚ôî\n e1c1"
	}

	// –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ? (Promotion)
	if mv.Promo() != chess.NoPieceType {
		// –æ–±—ã—á–Ω–æ last char = Q/R/N/B
		mv.Promo()
		//promoChar := string(mv.String()[len(mv.String())-1]) // "Q","R","N","B"
		return fmt.Sprintf("ü™Ñ%süí®‚ú®%s‚ú®\n %s", p.String(), game.PieceToStr(chess.Piece(mv.Promo())), mv.String())
	}

	// –û–±—ã—á–Ω—ã–π —Ö–æ–¥. –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞—Ö–≤–∞—Ç:
	text := ""
	if mv.HasTag(chess.Capture) {
		// –ü—Ä–∏–º–µ—Ä: "(‚§¥)‚ôò‚öîÔ∏è‚ôú (g6->h8)"
		// –õ–∏–±–æ "‚ôô‚öî‚ôû (b2->b3)"
		text = fmt.Sprintf("%s‚öîÔ∏è ", p.String())
	} else {
		// –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ–¥: "‚ôô‚¨ÜÔ∏è", "‚ôû‚§µ", "‚ôó‚ÜñÔ∏è" etc.
		text = p.String()
	}

	fromSq, toSq := mv.S1(), mv.S2()
	color := p.Color() == chess.White
	arrow := game.ArrowForMove(fromSq, toSq, color) // –Ω–∞–ø—Ä. "‚ÜôÔ∏è"
	text += fmt.Sprintf("%s (%s->%s)", arrow, fromSq.String(), toSq.String())

	return text
}
