package telegram

import (
	"fmt"

	"telega_chess/internal/db"
	"telega_chess/internal/game"
	"telega_chess/internal/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

func makeFinalTitle(r *db.Room) string {
	if r.Player1.Username == "" {
		return "tChess:????"
	}
	if r.Player2.Username == "" {
		return fmt.Sprintf("tChess:@%s_‚öîÔ∏è_??", r.Player1.Username)
	}
	return fmt.Sprintf("tChess:@%s_‚öîÔ∏è_@%s", r.Player1.Username, r.Player2.Username)
}

func tryRenameGroup(bot *tgbotapi.BotAPI, chatID int64, newTitle string) {
	renameConfig := tgbotapi.SetChatTitleConfig{
		ChatID: chatID,
		Title:  newTitle,
	}
	_, err := bot.Request(renameConfig)
	if err != nil {

		utils.Logger.Error(
			fmt.Sprintf("üòñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É (chatID=%d): %v ü§ï", chatID),
			zap.Error(err))

		// –°–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞
		retryBtn := tgbotapi.NewInlineKeyboardButtonData(
			"–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
			fmt.Sprintf("retry_rename:%s", newTitle),
		)
		kb := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(retryBtn),
		)
		msg := tgbotapi.NewMessage(chatID,
			"–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ 'Change group info' –∏ –Ω–∞–∂–º–∏—Ç–µ [–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ].")
		msg.ReplyMarkup = kb
		bot.Send(msg)
	}
}

func notifyGameStarted(bot *tgbotapi.BotAPI, room *db.Room) {
	// 1) –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!"
	introMsg := game.MakeGameStartedMessage(room)

	// 2) –û—Ç–ø—Ä–∞–≤–∏–º –∏–Ω—Ç—Ä–æ (–≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –≤ –ª–∏—á–∫—É)
	sendMessageToRoomOrUsers(bot, room, introMsg)

	// 3) ASCII-–¥–æ—Å–∫–∞
	fen := ""
	if room.BoardState != nil {
		fen = *room.BoardState
	}
	asciiBoard, err := game.RenderBoardCustom(fen) // –∏–ª–∏ RenderBoardFromFEN
	//utils.Logger.Info("RenderBoardCustom() -> ", zap.String("board", asciiBoard))
	if err != nil {
		utils.Logger.Error("RenderBoardCustom() -> ", zap.Error(err))
		asciiBoard = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å–∫–∏"
		return
	}

	// 4) –û—Ç–ø—Ä–∞–≤–∏–º ASCII –¥–æ—Å–∫—É
	sendMessageToRoomOrUsers(bot, room, asciiBoard)
	/*~~~~~~~~~~~~~~~~~~~~~~~*/

	////1) –û–±–Ω–æ–≤–∏–º room (—É–∂–µ —Å–¥–µ–ª–∞–ª–∏), —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ –µ—â—ë —Ä–∞–∑ –ø–æ–ª—É—á–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	//r, _ := db.GetRoomByID(room.RoomID)
	//
	//// 2) –ì–µ–Ω–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	//msgText := game.MakeGameStartedMessage(r)
	//
	//// 3) ASCII-–¥–æ—Å–∫–∞
	//fen := ""
	//if room.BoardState != nil {
	//	fen = *room.BoardState
	//}
	//asciiBoard, err := game.RenderBoardCustom(fen) // –∏–ª–∏ RenderBoardFromFEN
	////utils.Logger.Info("RenderBoardCustom() -> ", zap.String("board", asciiBoard))
	//if err != nil {
	//	//bot.Send(tgbotapi.NewMessage(*r.ChatID, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å–∫–∏ RenderBoardCustom: "+err.Error()))
	//	utils.Logger.Error("RenderBoardCustom() -> ", zap.Error(err))
	//	return
	//}
	// 4) –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?
	//if r.ChatID != nil {
	//	// –≠—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
	//	bot.Send(tgbotapi.NewMessage(*r.ChatID, msgText))
	//	// –û—Ç–ø—Ä–∞–≤–∏–º ASCII-–¥–æ—Å–∫—É
	//	chattableBoard := tgbotapi.NewMessage(*r.ChatID, asciiBoard)
	//	chattableBoard.ParseMode = tgbotapi.ModeMarkdownV2
	//	bot.Send(chattableBoard)
	//} else {
	//	// 1:1 –∏–≥—Ä–∞
	//	// –®–ª—ë–º –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
	//	u1, _ := db.GetUserByID(r.Player1.ID)
	//	if r.Player2 != nil {
	//		u2, _ := db.GetUserByID(r.Player2.ID)
	//		// User1
	//		bot.Send(tgbotapi.NewMessage(u1.ChatID, msgText))
	//		chattableBoard := tgbotapi.NewMessage(u1.ChatID, asciiBoard)
	//		chattableBoard.ParseMode = tgbotapi.ModeMarkdownV2
	//		bot.Send(chattableBoard)
	//
	//		// User2
	//		bot.Send(tgbotapi.NewMessage(u2.ChatID, msgText))
	//		chattableBoard = tgbotapi.NewMessage(u2.ChatID, asciiBoard)
	//		chattableBoard.ParseMode = tgbotapi.ModeMarkdownV2
	//		bot.Send(chattableBoard)
	//	}
	//}
}

func sendMessageToRoom(bot *tgbotapi.BotAPI, room *db.Room, text string) error {
	// –ï—Å–ª–∏ ChatID –Ω–µ –∑–∞–¥–∞–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	if room.ChatID == nil {
		return fmt.Errorf("room.ChatID is nil, cannot send to group")
	}

	msg := tgbotapi.NewMessage(*room.ChatID, text)
	// –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ msg.ParseMode = "Markdown" or "HTML"
	_, err := bot.Send(msg)
	return err
}

func sendMessageToUsers(bot *tgbotapi.BotAPI, room *db.Room, text string) {
	// –í—ã–≥—Ä—É–∂–∞–µ–º player1
	u1, err1 := db.GetUserByID(room.Player1.ID)
	if err1 == nil && u1.ChatID != 0 {
		m1 := tgbotapi.NewMessage(u1.ChatID, text)
		bot.Send(m1)
	}

	// –í—ã–≥—Ä—É–∂–∞–µ–º player2, –µ—Å–ª–∏ –µ—Å—Ç—å
	if room.Player2 != nil {
		u2, err2 := db.GetUserByID(room.Player2.ID)
		if err2 == nil && u2.ChatID != 0 {
			m2 := tgbotapi.NewMessage(u2.ChatID, text)
			bot.Send(m2)
		}
	}
}

func sendMessageToRoomOrUsers(bot *tgbotapi.BotAPI, room *db.Room, text string) {
	// –ï—Å–ª–∏ group chatID –∑–∞–¥–∞–Ω, —à–ª—ë–º —Ç—É–¥–∞
	if room.ChatID != nil {
		err := sendMessageToRoom(bot, room, text)
		if err != nil {
			utils.Logger.Error("sendMessageToRoom error:", zap.Error(err))
		}
	} else {
		// –ò–Ω–∞—á–µ —à–ª—ë–º –æ–±–æ–∏–º
		sendMessageToUsers(bot, room, text)
	}
}
