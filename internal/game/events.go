package game

import (
	"time"

	"github.com/notnil/chess"
)

// EventType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
type EventType int

const (
	EventMove EventType = iota
	EventCapture
	EventCheck
	EventCheckmate
	EventDraw
	EventPromotion
	EventCastling
	EventEnPassant
	EventTimeOut
	EventResign
)

// GameEvent –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∏–≥—Ä–µ
type GameEvent struct {
	Type      EventType
	Move      *chess.Move
	Position  *chess.Position
	Timestamp time.Time
	PlayerID  int64
	Extra     map[string]interface{} // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
}

// EventHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
type EventHandler struct {
	renderer *EnhancedBoardRenderer
	log      *utils.Logger
}

// NewEventHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
func NewEventHandler(renderer *EnhancedBoardRenderer) *EventHandler {
	return &EventHandler{
		renderer: renderer,
		log:      utils.Logger(),
	}
}

// HandleEvent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (eh *EventHandler) HandleEvent(event *GameEvent) string {
	var message string

	switch event.Type {
	case EventCapture:
		message = eh.handleCapture(event)
	case EventCheck:
		message = eh.handleCheck(event)
	case EventCheckmate:
		message = eh.handleCheckmate(event)
	case EventPromotion:
		message = eh.handlePromotion(event)
	case EventCastling:
		message = eh.handleCastling(event)
	case EventEnPassant:
		message = eh.handleEnPassant(event)
	case EventTimeOut:
		message = eh.handleTimeout(event)
	case EventResign:
		message = eh.handleResign(event)
	}

	eh.log.WithFields(map[string]interface{}{
		"event_type": event.Type,
		"player_id":  event.PlayerID,
		"timestamp":  event.Timestamp,
	}).Info("Game event processed")

	return message
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
func (eh *EventHandler) handleCapture(event *GameEvent) string {
	return utils.CaptureSymbol + " –í–∑—è—Ç–∏–µ —Ñ–∏–≥—É—Ä—ã!"
}

func (eh *EventHandler) handleCheck(event *GameEvent) string {
	return "‚ö†Ô∏è –®–∞—Ö!"
}

func (eh *EventHandler) handleCheckmate(event *GameEvent) string {
	return "üèÜ –ú–∞—Ç! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞."
}

func (eh *EventHandler) handlePromotion(event *GameEvent) string {
	promotedTo := event.Extra["promoted_to"].(string)
	return utils.PromotionSymbol + " –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—à–∫–∏ –≤ " + promotedTo + " " + utils.SparklesSymbol
}

func (eh *EventHandler) handleCastling(event *GameEvent) string {
	side := event.Extra["side"].(string)
	return "üè∞ –†–æ–∫–∏—Ä–æ–≤–∫–∞ " + side
}

func (eh *EventHandler) handleEnPassant(event *GameEvent) string {
	return "üëª –í–∑—è—Ç–∏–µ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–µ!"
}

func (eh *EventHandler) handleTimeout(event *GameEvent) string {
	return "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!"
}

func (eh *EventHandler) handleResign(event *GameEvent) string {
	return "üè≥Ô∏è –ò–≥—Ä–æ–∫ —Å–¥–∞–ª—Å—è"
}
